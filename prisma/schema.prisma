// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  USERP
  USERR
}

model Feedback {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userIdService  Int
  userService    UserService     @relation(fields: [userIdService], references: [id])
  userIdCustomer Int
  userCustomer   UserCustomer    @relation(fields: [userIdCustomer], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skills {
  id        Int    @id @default(autoincrement())
  name      String
  cnae      String?
  userId    Int
  user      UserService   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserService {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  username  String
  password  String? // Password is nullable for OAuth users 
  googleId  String?        @unique
  feedback  Feedback[]
  trainingCourses TrainingCourses[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  skills Skills[]
  avaliation_range AvaliationRange[]
  payments Payments[]
  ratings Ratings[]
  location Json?
  serviceExecutions ServiceExecution[]  

  UserServiceData UserServiceData[]
}
model UserCustomer {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  username  String
  password  String? 
  googleId  String?        @unique
  feedback  Feedback[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  avaliation_range AvaliationRange[]
  payments Payments[]
  ratings Ratings[]

  ServiceExecution ServiceExecution[]
}
model UserServiceData {
  id        Int      @id @default(autoincrement())
  cnpj      String?        @unique
  cpf       String?        @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  district   String?
  country   String?
  website   String?
  companyName String?
  email     String?
  description String?
  userId    Int      @unique
  userService      UserService    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model TrainingCourses{
  id        Int      @id @default(autoincrement())
  title     String
  institution String
  startDate DateTime
  endDate   DateTime?
  certificateUrl String?
  userId    Int
  user      UserService    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model AvaliationRange {
  id        Int    @id @default(autoincrement())
  range     Int
  userIdService    Int
  userService      UserService   @relation(fields: [userIdService], references: [id])
  userIdCustomer   Int
  userCustomer    UserCustomer  @relation(fields: [userIdCustomer], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Ratings {
  id        Int      @id @default(autoincrement())
  score     Int
  comment   String?
  userIdService    Int
  userService      UserService     @relation(fields: [userIdService], references: [id])
  userIdCustomer   Int
  userCustomer     UserCustomer    @relation(fields: [userIdCustomer], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Payments {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  status    String // e.g., PENDING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userService   UserService     @relation(fields: [userId], references: [id], map: "Payments_userIdService_fkey")
  userCustomer  UserCustomer    @relation(fields: [userId], references: [id], map: "Payments_userIdCustomer_fkey")

}
model ServiceExecution {
  id            Int      @id @default(autoincrement())
  serviceName   String
  description   String?
  userIdService Int
  userIdCustomer Int
  userService   UserService     @relation(fields: [userIdService], references: [id])
  userCustomer  UserCustomer    @relation(fields: [userIdCustomer], references: [id])
  status        String // e.g., PENDING, IN_PROGRESS, COMPLETED, CANCELED
  price         Float
  executionDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


